https://socket.io/docs/v4/server-api/
https://socket.io/docs/v4/client-api/

Terms:
    -Node.js: cross-platform, open-source server environment. 
        - back-end JS runtime environment (runs on V8 JS engine) that executes JS code outside Browser
    -Express.js is back end NOde.js web application framework for building web apps and APIs.
    -JSON - JavaScript Object Notation is standard format for storing and transporting data 
        - self-describing and easy to understand, comments are not permitted in json



Introduction:
    -Sockets have traditionally been the solution around which most real-time chat systems are architected, 
        providing a bi-directional communication channel between a client and a server.
    -This means that the server can push messages to clients. Whenever you write a chat message, 
        the idea is that the server will get it and push it to all other connected clients.
    
Syntax settings:
    In Node.js, there are two ways to import modules.
        - Standard way ESM (EcmaScript modules) : import { Server } from "socket.io"; //Recommended
        - Legacy way CommonJS: const { Server } = require("socket.io");

1 - Project initialization:
    Setup simple HTML webpage that serves out a form and a list of messages.

    - We're going to use Node.js web framework express to this end. 
    Install node.js, create package.json file in root directory, and add this to the file
        {
        "name": "socket-chat-app", // This should be unique (not sth like socket.io or express (npm will complain when installing dependencies))
        "version": "0.0.1",
        "description": "my first socket.io app",
        "type": "module",
        "dependencies": {}
        }
    To easily populate dependencies property, use:
        npm install express@4 // Version 4. This will add Express.js as dependency
    Once it's installed we can create an "index.js" file that will set up our application:
        import express from 'express'; // Import the express module
        import { createServer } from 'node:http'; // Import the createServer function from the http module in Node.js

        const app = express(); // Create an instance of an express application
        const server = createServer(app); // Create a new HTTP server and pass the express app as the request handler

        app.get('/', (req, res) => { // Define the route handler for get request made to root path ('/')
            res.send('<h1>Hello world</h1>'); // Send a response with h1 html element
        });

        server.listen(3000, () => { // Start the server, listening on port 3000
            console.log('server running at http://localhost:3000'); // Log a message when the server starts successfully
        })
    Run node index.js and visit http://localhost:3000 in your Browser
    
2 - Serving HTML:
    So far, we are calling res.send and passing it a string of HTML. 
    Let's create a index.html and serve that.

    So, change this:
        app.get('/', (req, res) => { // Define the route handler for get request made to root path ('/')
            res.send('<h1>Hello world</h1>'); // Send a response with h1 html element
        });
    to this:
        app.get("/", (req, res) => {
            // res.sendFile(new URL('./index.html', import.meta.url).pathname); //This didn't work for some reason
            const filepath = path.resolve("./index.html");
            res.sendFile(filepath)
        });
        /**
         * Route handler for the root URL ("/").
         * Sends the index.html file as the response.
         */
    Also, add import path from 'path'; at the top
    add html file with a form that has message box and send button. (and some css)
        index.html added to project directory.
    restart the process and refresh tha page.

3 - Integrating Socket.io:
    Socket.io is composed of two parts:
        1) A server that integrates with the Node.js HTTP Server (the socket.io package)
        2) A client library that loads on the browser side (the socket.io-client package)
    
    During development, socket.io serves the client automatically for us, as we'll see, so for now we only have to install one module:
        npm install socket.io
    This will install the module and add the dependency to package.json.
    So, add:
        import { Server } from 'socket.io';

        const io = new Server(server);

        io.on('connection', (socket) => { 
            console.log('a user connected');
            socket.on('disconnect', () => {
                console.log('user disconnect');
            });
        })

    Now, add the following script tags just above the </body> tag in index.html:
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io(); // not specifying any URL when I call io(), since it defaults to trying to connect to the host that serves the page.
    </script>

4 - Emitting events:
    The main idea behind Socket.io is that you can send and receive any events you want, with any data you want.

    Lets make sure that when the user types in a message, the server gets it as a chat message event:

    Change script section to this:
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();

        const form = document.getElementById('form');
        const input = document.getElementById('input');

        form.addEventListener('submit', (e) => {
            e.preventDefault();
            if (input.value) {
                socket.emit('chat message', input.value);
                input.value = '';
            }
        });
    </script>

5 - Broadcasting:
    Goal: emit the event from the server to the rest of the users.
    To send an event to everyone, socket.io gives us the io.emit() method.
    Eg: io.emit("hello", "world"); 
        will emit the event to all connected sockets.
    If you wan't to send a message to everyone except for a certain emitting socket, we have broadcast flag for emitting from that socket:
    io.on('connection', (socket) => {
        socket.broadcast.emit('hi');
    });

    Do this:
    In this case, for the sake of simplicity, we'll send the message to everyone, including the sender:
        io.on('connection', (socket) => {
            socket.on('chat message', (msg) => {
                io.emit('chat message', msg);
            });
        });
    
    And on the client side, when we capture a chat message event we'll include it in the page.

    Add these to index.html:
        const message = document.getElementById('messages');

        socket.on('chat message', (msg) => {
            const item = document.createElement('li');
            item.textContent = msg;
            messages.appendChild(item);
            window.scrollTo(0, document.body.scrollHeight);
        });

6 - Overview of the API:
    Common API - works on both client and the server

    Basic emit:
    You can send any data to the other side with socket.emit():
        From client to server:
            Client:
                socket.emit('hello', 'world');
            Server:
                io.on('conection', (socket) =>{
                    socket.on('hello', (arg) => {
                        console.log(arg);
                    });
                })
        From server to client:
            Server:
                socket.on('hello', (arg) => {
                    console.log(arg);
                });
            Client:
                socket.on('hello', (arg) => {
                    console.log(arg); // 'world'
                })
    You can send any number of arguments, and all serializable data structures are supported. (including ArrayBuffer, TypedArray, or Buffer(Node.js only))
    Calling JSON.stringify() on objects is not needed.
        From client to server:
            Client:
                socket.emit('hello', 1, '2', {3: '4', 5: Uint8Array.from([6]) });
            Server:
                io.on('connection', (socket) => {
                    io.on('hello', (arg1, arg2, arg3) => {
                        console.log(arg1); // 1
                        console.log(arg2); // '2'
                        console.log(arg3); // {3: '4', 5: <Buffer 06> }
                    });
                });
        From server to client:
            Server:
                io.on('connection', (socket) => {
                    socket.emit('hello', 1, '2', {3: '4', 5: Buffer.from([6]) });
                });
            Client:
                socket.on('hello', (arg1, arg2, arg3) => {
                    console.log(arg1); // 1
                    console.log(arg2); // '2'
                    console.log(arg3); // {3: '4', 5: ArrayBuffer (1) [6] }
                });

Acknowledgements:
    If you need more classic request-response API, socket.io has a feature named 'Acknowledgements'.

    1. With a callback function:
        You can add a callback function as the last argument of the emit(), and this callback will be called once the other side has Acknowledged the event:

        From client to server:
            Client:
                socket.timeout(5000).emit('request', { foo: 'bar' }, 'baz', (err, response) => {
                    if (err) {
                        // the server did not acknowledge the event in the given delay
                    } else {
                        console.log(response.status); // 'ok'
                    }
                });
            Server:
                io.on('connection', (socket) => {
                    socket.on('request', (arg1, arg2, callback) => {
                        console.log(arg1);
                        console.log(arg2);
                        callback({
                            status: 'ok'
                        });
                    });
                });

        From server to client:
            Server:
                io.on('connection' (socket) => {
                    socket.timeout(5000).emit('request', { foo: 'bar'}, 'baz', (err, response) => {
                        if(err) {
                            // the client did not acknowledge the event in the game delay
                        } else {
                            console.log(response.status); // 'ok'
                        }
                    });
                });
            Client:
                socket.on('request', (arg1, arg2, callback) => {
                    console.log(arg1); // { foo: 'bar' }
                    console.log(arg2); // 'baz'
                    callback({
                        status: 'ok'
                    });
                });
    2. emitWithAck() method provides the same functionality but returns a promise which will resolve once the other side acknowledge the event.    
        From client to server:
            Client:
                try {
                    const response = socket.timeout(5000).emitWithAck('request', { foo: 'bar' }, 'baz');
                    console.log(response.status); // 'ok'
                } catch (e) {
                    // the server did not acknowledge the event in the given delay
                }
            Server:
                io.on('connection', (socket) => {
                    socket.on('request', (arg1, arg2, callback) => {
                        console.log(arg1); // { foo: 'bar' }
                        console.log(arg2); // 'baz'
                        callback({
                            status: 'ok'
                        });
                    });
                });

Catch-all listeners:
    A catch-all listeners is a listener that will be called for any incoming event. (Useful for debugging).
    Sender:
        socket.emit('hello', 1, '2', {3: '4', 5: Uint8Array.from([6]) });
    Receiver:
        socket.onAny((eventName, ...args) => {
            console.log(eventNmae);
            console.log(args);
        });
Server API:
    Broadcasting: You can broadcast an event to all connected clients with io.emit()
    Rooms: A room is an arbitrary channel that sockets can join and leave.
        It can be used to broadcast events to a subset of connected clients:
        io.on('connection', (socket) => {
            // join the room named 'some room'
            socket.join('some room');

            // broadcast to all connected clients in the room
            io.to('some room').emit('hello', 'world');

            // broadcast to all connected clients except those in the room
            io.except('some room').emit('hello', 'world');

            // leave the room
            socket.leave('some room');
        });

7. Handling disconnections
    Two important properties of Socket.io:
        - a socket.io client is not always connected
        - a socket.io server doesn't store any event
    Even over a stable network, it is not possible to maintain a connection alive forever.

    Which means that your application needs to be able to synchronize the local and global state after disconnection.
    Socket.io client will automatically try to reconnect after a small delay. But what's missed is missed.

8. Connection state recovery
    First lets handle disconnections by pretending that there was no disconnection: this feature is called 'Connection state recovery'.
    This feature will temporarily store all the events that are sent by the server and will try to restore the state of a client when it reconnects:
        restore its rooms, send any missed events.
    It must be enabled on the server side:
        const io = new Server(server, {
            connectionStateRecovery: {}
        });
    Why not enabled by default:
        It doesn't always work, for eg. if the server abruptly crashes or gets restarted, client state might not be saved.
        It isn't always possiblne to enable this feature when scaling up.
    Still greate feature since it doesn't require you to synchronize the state after a temporarily disconnect.

9. Server delivery
    There are two common ways to synchronize the state of the client upon reconnection:
        Either the server sends the whole state
        or the client keeps track of the last event it has processed and the server sends the missing pieces
    Both are totally valid, choosin one will depend on your use case. In this tutorial, we will go with the latter.

    Lets learn the second method, we will use SQLite: https://www.sqlitetutorial.net
    Install sqlite3: npm install sqlite sqlite3

    Add this to index.js:
        import sqlite3 from 'sqlite3';
        import {open} from 'sqlite';

        //open the database file
        const db = await open({
            filename: 'chat.db';
            driver: sqlite3.Database
        });

        //create our 'messages' table (you can ignore the 'client_offset' column for now)
        await db.exec(`
            CREATE TABLE IF NOT EXISTS messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                client_offset TEXT UNIQUE,
                content TEXT;
            );
        );

        And add this too:
    
    io.on('connection', (socket) => {
        socket.on('chat message', async (msg) => {
            let result;
            try {
                // store the message in the database
                result = await db.run('INSERT INTO messages (content) VALUES (?)', msg);
            } catch (e) {
                // TODO handle the failure
                return;
            }
                // include the offset with the message
            io.emit('chat message', msg, result.lastID);
        });
    });

    The client will then keep track of the offset: (Add inside script tag in index.html)
    const socket = io({
        auth: {
        serverOffset: 0
        }
     });

     socket.on('chat message', (msg, serverOffset) => {
        const item = document.createElement('li');
        item.textContent = msg;
        messages.appendChild(item);
        window.scrollTo(0, document.body.scrollHeight);
        socket.auth.serverOffset = serverOffset;
     });

    And the server will send the missing messages upon reconnection:
    if (!socket.recovered) {
        // if the connection state recovery was not successful
        try {
        await db.each('SELECT id, content FROM messages WHERE id > ?',
            [socket.handshake.auth.serverOffset || 0],
            (_err, row) => {
            socket.emit('chat message', row.content, row.id);
            }
        )
        } catch (e) {
        // something went wrong
        }
    }

10. Client delivery
    Making sure that the server always receives the messages sent by the clients.

    By default, Socket.IO provides an "at most once" guarantee of delivery (also known as "fire and forget"),
    which means that there will be no retry in case the message does not reach the server.

    Buffered events:
    When a client gets disconnected, any call to socket.emit() is buffered until reconnection.
    This behavior might be totally sufficient but a message could be lost if connection severed while event is being sent,
    , the server crashes or get restarted while processing the event, or database is temporarily not available.

    At lease once:
    We can implement an 'at least one' guarantee:

    Manually with an acknowledgement:
    function emit(socket, event, arg) {
        socket.timeout(5000).emit(event, arg, (err) => {
            if(err) {
                // no ack from the server, let's retry
                emit(socket, event, arg);
            }
        });
    }

    emit(socket, 'hello', 'world');

    Or, with retries option:

    const socket = io({
        ackTimeout: 10000,
        retries: 3
    });

    socket.emit('hello', 'world');

    In both cases, the client will retry to send the message until it gets an acknowledgement from the server:

    io.on('connection', (socket) => {
        socket.on('hello', (value, callback) => {
            // once the event is successfully handled
            callback();
        });
    })

    With the retries option, the order of the messages is guaranteed, as the messages are queued and sent one by one.
    This is not the case with the first option.

    Exactly once:
    The problem with retries is that the server might now receive the same message multiple times.

    We will start by assigning a unique identifier to each message on the client side:
    So, add this in index.html:

    let counter = 0;

    with socket declaration:
    ackTimeout: 10000,
    retries: 3

    Inside submit event listener,
    if (input.value) {
        // compute a unique offset
        const clientOffset = `${socket.id} - ${counter++}`;
        socket.emit('chat message', input.value, clientOffset);
        input.value = '';
    }

    And then we store this offset alongside the message on the server side:
    Add this inside index.js:

    io.on('connection', async(socket) => {
        socket.on('chat message', async(msg, clientOffset, callback) => {
            let result;
            try {
                result = await db.run('INSERT INTO messages (content, client_offset) VALUES (?,?)', msg, clientOffset);
            } catch(e) {
                if(e.errno === 19 /* SQLITE_CONSTRAINT */ ) {
                    // the message was already inserted, so we notify the client
                    callback();
                } else {
                    // nothing to do, just let the client retry
                }
                return;
            }
            io.emit('chat message', msg, result.lastID);
            // acknowledge the event
            callback();
        });

        //if recovered part
    })